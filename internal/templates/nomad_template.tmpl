job "example" {
  datacenters = ["dc1"]
  type        = "service"

  {{- if .Update.MaxParallel }}
  update {
    max_parallel      = {{.Update.MaxParallel}}
    min_healthy_time   = "{{.Update.MinHealthyTime}}"
    healthy_deadline  = "{{.Update.HealthyDeadline}}"
    progress_deadline = "{{.Update.ProgressDeadline}}"
    auto_revert       = {{.Update.AutoRevert}}
    canary           = {{.Update.Canary}}
  }
  {{- end }}

  {{- if .Migrate.MaxParallel }}
  migrate {
    max_parallel      = {{.Migrate.MaxParallel}}
    health_check      = "{{.Migrate.HealthCheck}}"
    min_healthy_time   = "{{.Migrate.MinHealthyTime}}"
    healthy_deadline  = "{{.Migrate.HealthyDeadline}}"
  }
  {{- end }}

  {{- if .Service.Provider }}
  service {
    name = "example"
    port = "http"
    check {
      name     = "{{.Service.Check.Name}}"
      type     = "{{.Service.Check.Type}}"
      interval = "{{.Service.Check.Interval}}"
      timeout  = "{{.Service.Check.Timeout}}"
    }
  }
  {{- end }}

  {{- if .Restart.Attempts }}
  restart {
    attempts = {{.Restart.Attempts}}
    interval = "{{.Restart.Interval}}"
    delay    = "{{.Restart.Delay}}"
    mode     = "{{.Restart.Mode}}"
  }
  {{- end }}

  {{- if .EphemeralDisk.Sticky }}
  ephemeral_disk {
    sticky  = {{.EphemeralDisk.Sticky}}
    migrate = {{.EphemeralDisk.Migrate}}
    size    = {{.EphemeralDisk.Size}}
  }
  {{- end }}

  {{- range .Templates }}
  template {
    data        = "{{.Data}}"
    destination = "{{.Destination}}"
    change_mode = "{{.ChangeMode}}"
    change_signal = "{{.ChangeSignal}}"
    env         = {{.Env}}
  }
  {{- end }}

  group "group1" {
    count = {{.InstancesCount}}
    task "task1" {
      driver = "docker"
      config {
        image = "{{.Image}}"
        args = {{.Task.Args | marshalArgs}}
        resources {
          cpu    = {{.CPU}}
          memory = {{.Memory}}
        }
      }
      {{- if .Task.Bind }}
      bind = "{{.Task.Bind}}"
      {{- end }}
      {{- if .Task.Datacenter }}
      datacenter = "{{.Task.Datacenter}}"
      {{- end }}
      {{- if .Task.MyEnv }}
      env {
        MY_ENV = "{{.Task.MyEnv}}"
      }
      {{- end }}
      {{- if .Task.MetaFoo }}
      meta {
        foo = "{{.Task.MetaFoo}}"
      }
      {{- end }}
      {{- if .Task.Command }}
      command = "{{.Task.Command}}"
      {{- end }}
      {{- if .Task.Ports }}
      ports = "{{.Task.Ports}}"
      {{- end }}
      {{- if .Task.Volumes }}
      volumes = {{.Task.Volumes | marshalVolumes}}
      {{- end }}
      {{- if .Task.AuthSoftFail }}
      auth_soft_fail = true
      {{- end }}
    }
  }
}